{
  "hash": "2243b0701a4c4560b351bc9c24d53aed",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Generalized Least Squares\"\nauthor: \"Chris Kelly\"\ndate: '02-21-24'\ncategories: []\nformat:\n  html:\n    code-fold: true\n    toc: true\ndraft: true\n---\n\n::: {.callout-tip}\n### What are we exploring?\nApplying a weight matrix to correct for non-homoskedastic error variance can be more efficient than OLS with sandwich errors. This is a common approach in econometrics and is known as Generalized Least Squares (GLS).\n:::\n\n## Introduction\n\nAs seen when exploring [sandwich estimators](ols_sandwich_estimators.html), the assumption of homoskedasticity is often violated in real-world data. This can lead to inefficient estimates and incorrect inference too. \n\nSandwich estimators correct for the variance by adjusting the standard error after OLS estimation. However, another approach is to correct for the variance before estimation by applying a weight matrix to the data before fitting. This is known as Generalized Least Squares (GLS). Weighted least squares (WLS) is a special case of GLS.\n\n## The Motivation\n\nFirst - let’s state that:\n\n* $E(\\epsilon|X)=0$\n* $V(\\epsilon \\epsilon^{\\intercal}|X)=\\sigma^2\\underset{n \\times n}{\\Omega}$\n\nThis means that although the assumption of endogeneity is not violated, the assumption of homoskedasticity is. And more specifically, that the variance of the error term can be decomposed between into the constant variance $\\sigma^2$ and a covariance matrix $\\Omega$.\n\nNow according to Cholesky decomposition, if $\\Omega$ is symmetric positive definite, then there exists a lower triangular matrix $\\mathrm{P}$ such that:\n\n$$\n\\displaylines{\n\\Omega=(\\mathrm{P}^{\\intercal}\\mathrm{P})^{-1} = \\mathrm{P}^{-1}(\\mathrm{P}^{\\intercal})^{-1} \\\\\n\\therefore \\mathrm{P} \\Omega \\mathrm{P}^{\\intercal} = I\n}\n$$\n\nSo, if we transform all variables by $\\mathrm{P}$:\n\n* We get the following form: $\\mathrm{P} y = \\mathrm{P} X\\beta + \\mathrm{P} \\epsilon$\n* Then the expected error is still zero (i.e. consistency): $E[\\mathrm{P} \\epsilon] = \\mathrm{P} E[\\epsilon] = 0$\n* But the variance is now homoskedastic: $V[\\mathrm{P} \\epsilon] = \\mathrm{P} V[\\epsilon] \\mathrm{P}^{\\intercal} = \\sigma^2 \\mathrm{P} \\Omega \\mathrm{P}^{\\intercal} = \\sigma^2 I$\n\n:::{.column-margin}\nIt might be apparent now that Weighted Least Squares (WLS) is a special case of GLS, where $\\mathrm{P}$ is an error covariance matrix has zero off-digonal elements. \n:::\n\nThis is the motivation behind GLS. We can transform the data by $\\mathrm{P}$ to make the error variance homoskedastic, and then apply OLS to the transformed data.\n\nIn fact, we can use this to jump straight to the solution for the GLS estimator!\n$$\n\\displaylines{\n\\beta_{GLS} = \n[(\\mathrm{P} X)^{\\intercal}(\\mathrm{P} X)]^{-1}[(\\mathrm{P} X)^{\\intercal}(\\mathrm{P} y)] \\\\\n= \n[X^{\\intercal}\\mathrm{P}^{\\intercal}\\mathrm{P} X]^{-1}\n[X^{\\intercal}(\\mathrm{P}^{\\intercal}\\mathrm{P} y)] \\\\\n= [X^{\\intercal}\\Omega^{-1} X]^{-1}X^{\\intercal}(\\Omega^{-1} y)\n}\n$$\n\nHowever, how do we know what $\\mathrm{P}$ is? We have to estimate it.\n\n### Feasible Generalized Least Squares\n\nThe feasible GLS estimator is a two-step process:\n\n* Run a normal OLS regression. Estimate the error covariance matrix, $\\Omega$, using the residuals from the OLS regression.\n* Estimate $\\mathrm{P}$ using the Cholesky decomposition of $\\Omega$, and transform $y$ and $X$ by $\\mathrm{P}$\n\nWhilst GLS is more efficient, FGLS is only *asymptotically* more efficient, where the error covariance matrix is consistently estimated. In fact, for a small sample size, FGLS can be actually less efficient than OLS - and often it is even biased! It is only for large samples that FGLS would be preferred, as it is consistent. \n\nThus some authors prefer OLS, and use a sadnwich estimator instead. Finally - note that we can still apply the sandwich estimator to the FGLS coefficients as well.\n\n## Coding it up from scratch\n\nWe can inherit from the OLS class, but add a few extra methods to estimate the covariance matrix and apply the Cholesky decomposition. Finally we need to change the \n\n::: {#427338a1 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np, pandas as pd\nfrom typing import Optional, Tuple\nfrom scipy.linalg import qr, solve_triangular\nfrom scipy.stats import norm, t\n\nclass OLS:\n\n    def _convert_types(self, z) -> np.ndarray:\n        \"\"\" Re-shape and convert y to numpy array to work nicely with rest of functions \"\"\"\n        if type(z) in [pd.DataFrame, pd.Series]:\n            z2 = z.to_numpy()\n        if type(z) == list:\n            z2 = np.array(z)\n        if type(z) == np.ndarray:\n            z2 = z\n        else:\n            raise TypeError('Array must be a pandas series/dataframe, numpy array or list')\n        return z2\n             \n    def _get_y(self, y: Optional = None) -> np.ndarray:\n        \"\"\"Re-shape and convert y to numpy array to work nicely with rest of functions\"\"\"\n        if y is None:\n            y = self.y\n        return self._convert_types(y).reshape(-1)\n\n    def _get_X(self, X: Optional = None) -> Tuple[np.ndarray, np.ndarray]:\n        \"\"\"Re-shape and convert X to numpy array to work nicely with rest of functions\n        Also return names for summarising in coefficient table\"\"\"\n        if X is None:\n            X = self.X\n        X2 = self._convert_types(X)\n        if type(X) == pd.DataFrame:\n            exog_names = np.array(X.columns)\n        elif type(X) == pd.Series:\n            exog_names = np.array(['Unamed Exog Feature'])\n        else:\n            exog_names = np.arange(X2.shape[1])\n        X2 = X2.reshape(-1,len(exog_names))\n        return (X2, exog_names)\n        \n    def __init__(\n        self, \n        y: Optional[np.ndarray] = None, \n        X: Optional[np.ndarray] = None\n        ) -> None:\n        \"\"\"Initializes the OLS class to run an least-squares regression\"\"\"\n        if y is not None:\n            self.y = self._get_y(y)\n            self.n = len(self.y)\n        if X is not None:\n            self.X, self.exog_names = self._get_X(X)\n            self.k = self.X.shape[1]\n        if y is not None and X is not None and len(self.y) != self.X.shape[0]:\n            raise ValueError(\"y and X must be the same size.\")\n        self.beta, self.RSS, self.beta_se, self.conf_int, self.test_stat, self.p_val = None, None, None, None, None, None\n\n    def _quick_matrix_invert(self, X: np.ndarray) -> np.ndarray:\n        \"\"\" Find the inverse of a matrix, using QR factorization \"\"\"\n        Q, R = qr(X)\n        X_inv = solve_triangular(R, np.identity(X.shape[1])).dot(Q.transpose())\n        return X_inv\n\n    def _check_if_fitted(self):\n        \"\"\"Quick helper function that raises an error if the model has not been fitted already\"\"\"\n        if self.beta is None:\n            raise ValueError('Need to fit the model first - run fit()')\n        else:\n            return True\n\n    def _estimate_ls_coefs(\n        self,\n        y: Optional[np.ndarray] = None,\n        X: Optional[np.ndarray] = None\n    ):\n        \"\"\"Estimates the OLS coefficients given a vector y and matrix X\"\"\"\n        XTX = X.T.dot(X)\n        XTY = X.T.dot(y)\n        XTX_inv = self._quick_matrix_invert(XTX)\n        coefs = XTX_inv.dot(XTY)\n        return coefs, XTX_inv\n\n    def fit(\n        self,\n        y: Optional[np.ndarray] = None,\n        X: Optional[np.ndarray] = None,\n    ):\n        \"\"\"Estimates the OLS coefficients given a vector y and matrix X\"\"\"\n        # Import data\n        y = self._get_y(y)\n        X, exog_names = self._get_X(X)\n        if y is None or X is None:\n            raise ValueError('X and y is required for fitting')\n        if len(y) != X.shape[0]:\n            raise ValueError(\"y and X must be the same size.\")\n        # Store some metadata\n        self.y, self.X, self.exog_names = y, X, exog_names\n        self.n, self.k = X.shape\n        self.DoF = self.n - self.k\n        self.beta, self.var_X_inv = self._estimate_ls_coefs(y,X)\n\n    def _assess_fit(\n        self,\n        y: Optional[np.ndarray] = None,\n        X: Optional[np.ndarray] = None,\n    ) -> float:\n        \"\"\"Returns the unadjusted R^2\"\"\"\n        self._check_if_fitted()\n        if (y is None and X is not None) or (y is not None and X is None):\n            raise ValueError('Need to either provide both X and y, (or provide neither and R^2 is based on the X and y used for fitting)')\n        else:\n            y, (X, exog_names) = self._get_y(y), self._get_X(X)\n        y_hat = self.predict(self.X)\n        residuals = (y - y_hat).reshape(-1, 1)\n        RSS = residuals.T.dot(residuals)\n        TSS = (y - y.mean()).T.dot(y - y.mean())\n        unadj_r_squared = 1 - RSS/TSS\n        \n        if (y == self.y).all() and (X == self.X).all():\n            self.residuals = residuals\n            self.RSS = RSS\n            self.TSS = TSS\n            self.unadj_r_squared = unadj_r_squared\n        return unadj_r_squared\n\n    def _standard_error(self,) -> np.ndarray:\n        \"\"\"Returns the standard errors for the coefficients from the fitted model\"\"\"\n        if self.RSS is None:\n            self._check_if_fitted()\n            self._assess_fit()\n        sigma_sq = self.RSS / float(self.DoF) * np.identity(len(self.beta))\n        var_b = sigma_sq.dot(self.var_X_inv)\n        self.beta_se = np.sqrt(np.diag(var_b))\n        return self.beta_se\n\n    def _confidence_intervals(self, size = 0.95):\n        \"\"\"Returns the confidence intervals for the coefficients from the fitted model\"\"\"\n        if self.beta_se is None:\n            self._check_if_fitted()\n            self._standard_error()\n        alpha = 1-(1-size)/2\n        self.conf_int = np.array([\n            self.beta - t.ppf(alpha, self.DoF) * self.beta_se,\n            self.beta + t.ppf(alpha, self.DoF) * self.beta_se\n        ])\n        return self.conf_int\n\n    def _test_statistic(self) -> np.ndarray:\n        \"\"\"Returns the test statistics for the coefficients from the fitted model\"\"\"\n        if self.conf_int is None:\n            self._check_if_fitted()\n            self.conf_int = self._confidence_intervals()\n        self.test_stat = self.beta.flatten() / self.beta_se\n        return self.test_stat\n\n    def _p_value(self, z_dist: bool = False) -> np.ndarray:\n        \"\"\"Returns the p-values for the coefficients from the fitted model.\"\"\"\n        if self.test_stat is None:\n            self._check_if_fitted()\n            self.test_stat = self._test_statistic()\n        if z_dist:\n            self.p_val = [norm.cdf(-abs(z)) + 1 - norm.cdf(abs(z)) for z in self.test_stat]\n        else:\n            self.p_val = [2 * t.sf(abs(x), self.DoF) for x in self.test_stat]\n        return self.p_val    \n\n    def predict(\n        self,\n        X: Optional[np.ndarray] = None,\n    ) -> np.ndarray:\n        \"\"\"Predict values for y. Returns fitted values if X not provided.\"\"\"\n        self._check_if_fitted()\n        X2, exog_names = self._get_X(X)\n        y_hat = X2.dot(self.beta)\n        if X is None:\n            self.y_hat = y_hat\n        return y_hat\n\n    def summary(self, z_dist: bool = False) -> pd.DataFrame:\n        \"\"\"Returns the coefficients, standard errors, test statistics and p-values in a Pandas DataFrame.\"\"\"\n        if self.p_val is None:\n            self._check_if_fitted()\n            self._p_value(z_dist)\n        summary = pd.DataFrame(\n            data={\n                'Coefficient': self.beta.flatten(),\n                'Standard Error': self.beta_se,\n                'Lower bound': self.conf_int[0],\n                'Upper bound': self.conf_int[1],\n                'test-statistic': self.test_stat,\n                'p-value': self.p_val,\n            },\n            index=self.exog_names,\n        )\n        return summary\n```\n:::\n\n\n",
    "supporting": [
      "gls_fgls_wls_files"
    ],
    "filters": [],
    "includes": {}
  }
}